// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(auto()) @map("_id") @db.ObjectId
    userId            String  @db.ObjectId
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.String
    access_token      String? @db.String
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.String
    session_state     String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(auto()) @map("_id") @db.ObjectId
    sessionToken String   @unique
    userId       String   @db.ObjectId
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id              String         @id @default(auto()) @map("_id") @db.ObjectId
    name            String?
    email           String?        @unique
    description     String?
    createdAt       DateTime       @default(now())
    updatedAt       DateTime       @updatedAt
    password        String?
    emailVerified   DateTime?
    image           String?
    accounts        Account[]
    sessions        Session[]
    conversationIds String[]       @db.ObjectId
    conversations   Conversation[] @relation(fields: [conversationIds], references: [id])
    seenMessageIds  String[]       @db.ObjectId
    seedMessages    Message[]      @relation("Seen", fields: [seenMessageIds], references: [id])
    messages        Message[]

    @@map("users")
}

model Conversation {
    id            String    @id @default(auto()) @map("_id") @db.ObjectId
    createdAt     DateTime  @default(now())
    lastMessageAt DateTime  @default(now())
    name          String?
    isGroup       Boolean?
    users         User[]    @relation(fields: [userIds], references: [id])
    userIds       String[]  @db.ObjectId
    messages      Message[]

    @@map("conversations")
}

model Message {
    id              String        @id @default(auto()) @map("_id") @db.ObjectId
    createdAt       DateTime      @default(now())
    body            String?
    image           String?
    isEdited        Boolean       @default(false)
    conversation    Conversation? @relation(fields: [conversationId], references: [id], onDelete: Cascade)
    conversationId  String?       @db.ObjectId
    sender          User?         @relation(fields: [senderId], references: [id], onDelete: Cascade)
    senderId        String?       @db.ObjectId
    seenIds         String[]      @db.ObjectId
    seen            User[]        @relation("Seen", fields: [seenIds], references: [id])
    answeredMessage Message?      @relation("MessageAnswers", fields: [messageId], references: [id], onDelete: NoAction, onUpdate: NoAction)
    answers         Message[]     @relation("MessageAnswers")
    messageId       String        @db.ObjectId

    @@map("messages")
}
